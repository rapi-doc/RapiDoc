import { LitElement } from 'lit';
import 'prismjs/components/prism-css';
import 'prismjs/components/prism-yaml';
import 'prismjs/components/prism-go';
import 'prismjs/components/prism-java';
import 'prismjs/components/prism-json';
import 'prismjs/components/prism-bash';
import 'prismjs/components/prism-python';
import 'prismjs/components/prism-http';
import 'prismjs/components/prism-csharp';
import { RapiDocJSONSchemaViewerElement, ResolvedSpec } from '@rapidoc-types';
export default class JsonSchemaViewer extends LitElement implements RapiDocJSONSchemaViewerElement {
    isMini: boolean;
    updateRoute: 'true' | 'false';
    renderStyle: string;
    allowAdvancedSearch: 'true' | 'false';
    selectedExampleForEachSchema: {};
    pathsExpanded?: 'true' | 'false' | boolean;
    private matchType?;
    matchPaths?: string;
    loadFailed?: boolean;
    resolvedSpec?: ResolvedSpec | null;
    private generateMissingTags?;
    private sortTags?;
    cssClasses?: string | undefined;
    pageDirection?: 'rtl' | 'ltr' | undefined;
    layout?: 'row' | 'column' | undefined;
    navItemSpacing?: 'relaxed' | 'compact' | undefined;
    responseAreaHeight?: string | undefined;
    headingText?: string | undefined;
    onSpecFileChange: () => void;
    specFile?: string | undefined;
    onFileLoadClick: () => void;
    onShowSearchModalClicked: () => void;
    infoDescriptionHeadingsInNavBar?: 'true' | 'false' | undefined;
    headerColor?: string | undefined;
    navBgColor?: string | undefined;
    navTextColor?: string | undefined;
    navHoverBgColor?: string | undefined;
    navHoverTextColor?: string | undefined;
    navAccentColor?: string | undefined;
    navAccentTextColor?: string | undefined;
    specUrl?: string;
    schemaStyle?: string;
    schemaExpandLevel?: number;
    schemaDescriptionExpanded?: 'true' | 'false';
    allowSchemaDescriptionExpandToggle?: 'true' | 'false';
    showHeader?: 'true' | 'false';
    showSideNav?: string;
    showInfo?: 'true' | 'false';
    allowSpecUrlLoad?: 'true' | 'false';
    allowSpecFileLoad?: 'true' | 'false';
    allowSpecFileDownload?: 'true' | 'false';
    allowSearch?: 'true' | 'false';
    theme?: 'dark' | 'light';
    bgColor?: string;
    textColor?: string;
    primaryColor?: string;
    fontSize?: 'default' | 'large';
    regularFont?: string;
    monoFont?: string;
    loadFonts?: string;
    loading?: boolean;
    static get styles(): import("lit").CSSResult[];
    connectedCallback(): void;
    render(): "" | import("lit-html").TemplateResult<1>;
    attributeChangedCallback(name: string, oldVal: string | null, newVal: string | null): void;
    onSpecUrlChange(): void;
    onSearchChange(e: Event): void;
    loadSpec(specUrl: string | null): Promise<void>;
    afterSpecParsedAndValidated(spec?: ResolvedSpec): Promise<void>;
    handleHref(e: Event): void;
    onSelectExample(e: Event): void;
    scrollToEventTarget(event: MouseEvent | KeyboardEvent): Promise<void>;
}
//# sourceMappingURL=json-schema-viewer.d.ts.map